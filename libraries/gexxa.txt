meta version "v2.2,js,ctx,refs,localcloud,unicodemodel,allasync,upperplex";
meta name "blank azure web api";
meta icon "Stacks";
meta color "#ffffffff";
meta rootId "x4mibwzdISu8zLeLgg7b3IKt";
meta iconArtId "wyfreugv";
meta isLibrary "yes";
meta allowExport "yes";
meta isCloud "yes";
meta hasIds "yes";
meta platform "network,npm,shell";
meta parentIds "";
// An Azure web api using Restify. #node #azure #restify #rest #api
#Qb4usfyu91x2SfdX meta import azure_storage {
  pub "qzkz"
  usage {
    type @table
    type table_query
    action `async` init()
    action `async` create_private_table_if_not_exists(name: String) returns(@table: ♻ azure_storage → @table)
    action `async` insert_entity(@table: ♻ azure_storage → @table, entity: Json_Object, when_present: String)
    action `async` update_entity(@table: ♻ azure_storage → @table, entity: Json_Object, mode: String)
    action `async` try_update_entity(@table: ♻ azure_storage → @table, entity: Json_Object, mode: String) returns(ok: Boolean)
    action `async` delete_entity(@table: ♻ azure_storage → @table, entity: Json_Object)
    action `sync` create_entity(PartitionKey: String, RowKey: String) returns(entity: Json_Builder)
    action `async` delete_table(@table: ♻ azure_storage → @table)
    action `sync` create_query(@table: ♻ azure_storage → @table) returns(query: ♻ azure_storage → table_query)
    action `sync` @top(query: ♻ azure_storage → table_query, count: Number) returns(res_query: ♻ azure_storage → table_query)
    action `sync` @where(query: ♻ azure_storage → table_query, expression: String, argument: String) returns(res_query: ♻ azure_storage → table_query)
    action `sync` partition_key_is(query: ♻ azure_storage → table_query, PartitionKey: String) returns(res_query: ♻ azure_storage → table_query)
    action `sync` @and(query: ♻ azure_storage → table_query, expression: String, argument: String) returns(res_query: ♻ azure_storage → table_query)
    action `sync` @or(query: ♻ azure_storage → table_query, expression: String, argument: String) returns(res_query: ♻ azure_storage → table_query)
    action `async` get_entity(@table: ♻ azure_storage → @table, PartitionKey: String, RowKey: String) returns(result: Json_Object)
    action `sync` page_size(query: ♻ azure_storage → table_query, count: Number) returns(res_query: ♻ azure_storage → table_query)
    action `async` execute(query: ♻ azure_storage → table_query) returns(entities: Json_Object)
    action `sync` create_log_id() returns(id: String)
    action `sync` create_random_id(size: Number) returns(id: String)
  }
}
#czWG9NcXY9uFZHMz
action \_init() {
  #bMLhngb94mCl87BE // This action runs when the web server starts up. To deploy this service, go to the script settings, then tap `[Azure]` under `[export to app]`.
  #rg6M5H46J1bK4x8c data→logger := app→create_logger("api");
  #fmCQZR9L4MGzZxju code→init_azure_services;
  #x2Y2gFv2oHeZKjaB code→init_restify;
}
#FrNAgtgAKnFVC43t
action GET_\u002fping() returns(#aM0QoLDaWxwAlfSy millis: Number) {
  #xzy3cNZXu2Lbz9f2 // Returns the number of milliseconds since epoch.
  #IYDlx4xcyWX5wD4m $millis := time→now→milliseconds_since_epoch;
}
#Uc74s6BEKtjofv4n meta import azure_search {
  pub "gxoyc"
  usage {
    #BVGhpbmca
    table Options {
      type = "Object";
      exported = true;
      persistent = false;
      fields {
        #WbpPTavV3XYENAQf service_name : String
        #xQdHjpoFK4iKIgyz api_key : String
        #J4Vffn1xdLaOmNsv version : String
      }
    }
    type Index_Definition
    type Index
    type Batch_Update
    type Field_Definition
    type Scoring_Profile
    action `async` create_or_update(schema: ♻ azure_search → Index_Definition) returns(index: ♻ azure_search → Index)
    action `sync` create_batch_update(index: ♻ azure_search → Index) returns(update: ♻ azure_search → Batch_Update)
    action `sync` upload(update: ♻ azure_search → Batch_Update, key: String) returns(doc: Json_Builder)
    action `sync` merge(update: ♻ azure_search → Batch_Update, key: String) returns(doc: Json_Builder)
    action `sync` delete(update: ♻ azure_search → Batch_Update, key: String)
    action `async` send(update: ♻ azure_search → Batch_Update) returns(status_code: Number)
    action `async` init(options\u003f: ♻ azure_search → Options)
    action `async` delete_index(index: ♻ azure_search → Index) returns(deleted: Boolean)
    action `async` statistics(index: ♻ azure_search → Index) returns(document_count: Number, storage_size: Number)
    action `sync` action_count(update: ♻ azure_search → Batch_Update) returns(count: Number)
    action `sync` create_index_definition(index_name: String, key_name: String) returns(schema: ♻ azure_search → Index_Definition)
    action `sync` add_field(schema: ♻ azure_search → Index_Definition, name: String, type: String) returns(field: ♻ azure_search → Field_Definition)
    action `sync` set_searchable(field: ♻ azure_search → Field_Definition, value: Boolean)
    action `sync` set_filterable(field: ♻ azure_search → Field_Definition, value: Boolean)
    action `sync` set_sortable(field: ♻ azure_search → Field_Definition, value: Boolean)
    action `sync` set_facetable(field: ♻ azure_search → Field_Definition, value: Boolean)
    action `sync` set_suggestions(field: ♻ azure_search → Field_Definition, value: Boolean)
    action `sync` set_retrievable(field: ♻ azure_search → Field_Definition, value: Boolean)
    action `sync` index_builder(schema: ♻ azure_search → Index_Definition) returns(jsb: Json_Builder)
    action `sync` add_CORS_origin(schema: ♻ azure_search → Index_Definition, origin: String)
    action `sync` update_builder(update: ♻ azure_search → Batch_Update) returns(jsb: Json_Builder)
    action `async` index_definition(index_name: String) returns(schema: Json_Object)
    action `async` indexe_definitions() returns(schema: Json_Object)
    action `sync` add_scoring_profile(index: ♻ azure_search → Index_Definition, name: String) returns(profile: ♻ azure_search → Scoring_Profile)
    action `sync` set_weight(profile: ♻ azure_search → Scoring_Profile, field: ♻ azure_search → Field_Definition, weight: Number)
    action `sync` add_magnitude(profile: ♻ azure_search → Scoring_Profile, field: ♻ azure_search → Field_Definition, boost: Number, interpolation: String, boosting_range_start: Number, boosting_range_end: Number, constant_boost_beyond_range: Boolean)
    action `sync` set_function_aggregation(profile: ♻ azure_search → Scoring_Profile, type: String)
    action `sync` key_field(schema: ♻ azure_search → Index_Definition) returns(key: ♻ azure_search → Field_Definition)
    action `sync` reset(update: ♻ azure_search → Batch_Update)
    action `sync` get(schema: ♻ azure_search → Index_Definition) returns(index: ♻ azure_search → Index)
    action `sync` index_name(@this: ♻ azure_search → Index) returns(name: String)
    action `sync` key_name(@this: ♻ azure_search → Index) returns(name: String)
  }
}
#i33oK3W1WoQk1Wb7 meta import azure_service_bus {
  pub "wiwq"
  usage {
    #BVGhpbmca
    table Shared_Access_Signature_Options {
      type = "Object";
      exported = true;
      persistent = false;
      fields {
        // Authorization rule name; if empty the ``RootManageSharedAccessKey`` is used
        #LZ3fT92mZud9ADXV key_name : String
        // The ``Primary Key`` associated to the Authorization rule. Leave empty for ``RootManageSharedAccessKey``.
        #Z5xeMrnQRfDYLF4h key : String
        // Expiration in seconds from the current time.
        #l9O44Lv51CRijsGx expires_in : Number
      }
    }
    type Topic
    type Queue
    type Queue_Message
    type Subscription
    action `async` init()
    action `async` create_topic_if_not_exists(name: String) returns(topic: ♻ azure_service_bus → Topic)
    action `async` create_queue_if_not_exists(name: String) returns(queue: ♻ azure_service_bus → Queue)
    action `async` send_message(queue: ♻ azure_service_bus → Queue, message: String)
    action `async` delete_queue(queue: ♻ azure_service_bus → Queue)
    action `async` receive_message(queue: ♻ azure_service_bus → Queue) returns(message: String)
    action `async` peek_message(queue: ♻ azure_service_bus → Queue) returns(message: ♻ azure_service_bus → Queue_Message)
    action `async` delete_message(message: ♻ azure_service_bus → Queue_Message)
    action `sync` content(message: ♻ azure_service_bus → Queue_Message) returns(content: String)
    action `async` delete_topic(topic: ♻ azure_service_bus → Topic)
    action `async` send_topic_message(topic: ♻ azure_service_bus → Topic, message: String)
    action `async` create_subscription(topic: ♻ azure_service_bus → Topic, name: String) returns(subscription: ♻ azure_service_bus → Subscription)
    action `async` delete_subscription(subscription: ♻ azure_service_bus → Subscription)
    action `async` receive_subscription_message(subscription: ♻ azure_service_bus → Subscription) returns(message: String)
    action `sync` create_sas_token(entity_path: String, options\u003f: ♻ azure_service_bus → Shared_Access_Signature_Options) returns(token: String)
    action `sync` namespace() returns(ns: String)
  }
}
#LUvGQdnC2vRRhh4e meta import azure_blob_storage {
  pub "semk"
  usage {
    #eQ9ksqF8mc5ykZ0k
    table Create_Options {
      type = "Object";
      exported = true;
      persistent = false;
      fields {
        #v2t1qjT74Nc5nEeS etag : String
        #zNv4AFwkrDTt7NE6 force_new : Boolean
        #JEQEgLG1XiOpoNTc just_try : Boolean
        #S4e80DX2Kc4HnE96 contentType : String
        #lqupeQTDrct300uA contentEncoding : String
        #xLEc1tc4MYZOowJi cacheControl : String
        #x7sLNi86uuIjZYsp contentDisposition : String
        #Ve2cFqb2VAgtpj7i timeoutIntervalInMs : Number
        #xRIj6RoUu0DC9f1I smartGzip : Boolean
      }
    }
    #BVGhpbmca
    table Get_Options {
      type = "Object";
      exported = true;
      persistent = false;
      fields {
        #MGcXNRSlXoeJkOtU timeoutIntervalInMs : Number
      }
    }
    type Blob_Service
    type Container
    type Blob_Info
    action `sync` init()
    action `sync` create_random_id(size: Number) returns(id: String)
    action `sync` create_blob_service() returns(blob_service: ♻ azure_blob_storage → Blob_Service)
    action `async` create_container_if_not_exists(blob_service: ♻ azure_blob_storage → Blob_Service, container_name: String, permission: String) returns(container: ♻ azure_blob_storage → Container)
    action `async` create_block_blob_from_local_file(container: ♻ azure_blob_storage → Container, blob_name: String, file_path: String) returns(result: ♻ azure_blob_storage → Blob_Info)
    action `async` create_block_blob_from_text(container: ♻ azure_blob_storage → Container, blob_name: String, text: String, options\u003f: ♻ azure_blob_storage → Create_Options) returns(result: ♻ azure_blob_storage → Blob_Info)
    action `async` get_blob_to_file(container: ♻ azure_blob_storage → Container, blob_name: String, file_path: String) returns(result: ♻ azure_blob_storage → Blob_Info)
    action `async` get_blob_to_text(container: ♻ azure_blob_storage → Container, blob_name: String, options\u003f: ♻ azure_blob_storage → Get_Options) returns(info: ♻ azure_blob_storage → Blob_Info)
    action `async` delete_blob(container: ♻ azure_blob_storage → Container, blob_name: String)
    action `async` get_blob_to_buffer(container: ♻ azure_blob_storage → Container, blob_name: String, options\u003f: ♻ azure_blob_storage → Get_Options) returns(result: ♻ azure_blob_storage → Blob_Info, buf: Buffer)
    action `async` set_service_properties(blob_service: ♻ azure_blob_storage → Blob_Service, properties: Json_Object) returns(result: Json_Object, response: Json_Object)
    action `async` set_cors_properties(blob_service: ♻ azure_blob_storage → Blob_Service, allowed_origins: String, allowed_methods: String, allowed_headers: String, exposed_headers: String, max_age_in_seconds: Number) returns(success: Boolean)
    action `async` service_properties(blob_service: ♻ azure_blob_storage → Blob_Service) returns(result: Json_Object, response: Json_Object)
    action `sync` etag(inf: ♻ azure_blob_storage → Blob_Info) returns(etag: String)
    action `sync` last_modified(inf: ♻ azure_blob_storage → Blob_Info) returns(lastmod: DateTime)
    action `sync` content_md5(inf: ♻ azure_blob_storage → Blob_Info) returns(md5: Buffer)
    action `async` list_blobs(container: ♻ azure_blob_storage → Container, prefix: String) returns(blobs: Collection[ ♻ azure_blob_storage → Blob_Info])
    action `sync` name(inf: ♻ azure_blob_storage → Blob_Info) returns(blob_name: String)
    action `sync` get_blob_url(container: ♻ azure_blob_storage → Container, blob_name: String, expires: Number) returns(blob_url: String)
    action `sync` generate_random_id(blob_service: ♻ azure_blob_storage → Blob_Service) returns(id: String)
    action `async` get_blob_properties(container: ♻ azure_blob_storage → Container, blob_name: String) returns(info: ♻ azure_blob_storage → Blob_Info)
    action `sync` succeded(inf: ♻ azure_blob_storage → Blob_Info) returns(ok: Boolean)
    action `sync` text(inf: ♻ azure_blob_storage → Blob_Info) returns(text: String)
    action `sync` error(inf: ♻ azure_blob_storage → Blob_Info) returns(message: String)
    action `sync` url(container: ♻ azure_blob_storage → Container) returns(url: String)
    action `async` create_block_blob_from_url(container: ♻ azure_blob_storage → Container, blob_name: String, url: String, options\u003f: ♻ azure_blob_storage → Create_Options) returns(result: ♻ azure_blob_storage → Blob_Info)
    action `sync` generate_shared_access_signature(container: ♻ azure_blob_storage → Container, blob_name: String, permissions: String, minutes: Number) returns(blobSAS: String)
    action `sync` set_log_level(blob_service: ♻ azure_blob_storage → Blob_Service, level: String)
    action `async` delete_container(blob_service: ♻ azure_blob_storage → Blob_Service, container_name: String)
    action `async` create_block_blob_from_buffer(container: ♻ azure_blob_storage → Container, blob_name: String, buffer: Buffer, options\u003f: ♻ azure_blob_storage → Create_Options) returns(result: ♻ azure_blob_storage → Blob_Info)
    action `async` create_gzipped_block_blob_from_buffer(container: ♻ azure_blob_storage → Container, blob_name: String, buffer: Buffer, options\u003f: ♻ azure_blob_storage → Create_Options) returns(result: ♻ azure_blob_storage → Blob_Info)
  }
}
#a4wL0Lb7xeWxhV4L meta import parallel {
  pub "fncvb"
  usage {
    type queue
    action `async` @for(count: Number, @action: Number_Action)
    action `async` for_batched(count: Number, batch_count: Number, item_action: Number_Action, batch_action: Action)
    action `sync` schedule(q: ♻ parallel → queue, task: Action)
    action `sync` create_queue(max_running: Number) returns(queue: ♻ parallel → queue)
    action `async` wait_for_empty(q: ♻ parallel → queue)
    action `async` for_json(js: Json_Object, @action: Json_Action)
  }
}
#CW3Wao3uu3Z2Fhe6
var logger : App_Logger {
  transient = true;
}
#nqXVz0rfKvDDnRD4
action init_azure_services() {
  #OBj6PIXBqnKUsTPb // Initializes Azure Storage, Azure Blob Storage and Azure Service Bus
  #r8um59444dareUX1 // TODO: setup Application Insights instrumentation key to collect statistics
  #lKXvUpBSfoDB4Fwn @\u267b→application_insights→init;
  #SefRc2WV2N6j47d4 @\u267b→azure_storage→init;
  #xEz0G2dzTJTWxcUJ @\u267b→azure_blob_storage→init;
  #zudlvXHTv0hhPwyW data→blobs := @\u267b→azure_blob_storage→create_blob_service;
  #F5RjrZA2zg2U0vx6 if true then {
    #MvPpKEWTfR2lF47o @\u267b→azure_service_bus→init;
    #x471VF7xAMk2DGHB @\u267b→azure_event_hubs→init;
    #pNmq2bCUAPLYWZdS where sas_token := @\u267b→azure_service_bus→create_sas_token("");
  }
  meta private;
}
#iiySPFknzOIjtFIO
var blobs : ♻ azure_blob_storage → Blob_Service {
  transient = true;
}
#rmfzWWMIFG8Ule9I
action init_restify() {
  #GL26xBm2sW9gi51S $server := @\u267b→restify→server;
  #q44IvFRo4glW35y4 // plugins
  #eq0FvCwwbob1i3UD $server→use(@\u267b→restify→authorization_parser);
  #Ee6qD4jb4Xr4TCYg $server→pre(@\u267b→restify→sanitize_path);
  #xiHn2sJ7jyfBOFLf $throttle := @\u267b→restify→throttle;
  #ZU1qf4WMSwf2ZZs8 where rate := 40;
  #S04R2349FF42Rb2O where burst := 100;
  #qa878gtstkVP7tTO where ip := true;
  #kld3kZpnFcZ4TVhB $server→use($throttle);
  #sptEZCs70xCB68CA $server→use(@\u267b→restify→CORS);
  #mFFPDO74C64OWH8s $server→use(@\u267b→restify→body_parser);
  #xSqpOmBEP6L2VCFi $server→use(@\u267b→restify→gzip_response);
  #xR4QGtRsV3hGoSJQ $server→use(@\u267b→restify→query_parser);
  #x9bNZzJ9tZk0l1Z4 $server→use(@\u267b→restify→conditional_request);
  #buXcIfKig0apgL4x @\u267b→restify_touchdevelop→autobind($server);
  #O8e4in6wAR7ZF8Ke code→init_routes;
  #UAx1DGb27XEqkYO5 $server→use(@\u267b→restify_touchdevelop→errors_to_log(data→logger));
  meta private;
}
#sNf6RB3kNnLfn4zy meta import restify {
  pub "wgscc"
  usage {
    action `async` `type` Request_Handler(req: ♻ restify → Request, res: ♻ restify → Response)
    #xLPhdjOebDT8w77X
    table Throttle_Options {
      type = "Object";
      exported = true;
      persistent = false;
      fields {
        #xo6LfV0hyAQtz675 rate : Number
        #yZ2QZAfeW3W74JA1 burst : Number
        #JUlNvDq7Hm9cTUAG ip : Boolean
        #w2h4dcf4I5K5h7kn xff : Boolean
        #RO3Sx6iTt4WsVBm6 username : Boolean
        #VbsYnDvr3t4Xr4VA maxKeys : Number
        #w25h9R5LKJnWiBNu tokensTable : ♻ restify → Tokens_Table
      }
    }
    #xdeuBx505IsZ6eEI
    table Serve_Static_Options {
      type = "Object";
      exported = true;
      persistent = false;
      fields {
        #NfWLVJBBbHvtMqkl default : String
        #KvIMj1sEoAwQCf22 maxAge : Number
      }
    }
    #mqEMUbizkEp6naSD
    table CORS_Options {
      type = "Object";
      exported = true;
      persistent = false;
      fields {
        #xMYYV6C3eS7PWsfQ origins : String
        #z5HdpFdSi792e1OX credentials : Boolean
        #Fw1D0A9ZfeMCf5c3 headers : String
      }
    }
    #w2zTzWkfMf01yOko
    table Body_Parser_Options {
      type = "Object";
      exported = true;
      persistent = false;
      fields {
        #mhaHCLobgUgMrv72 maxBodySize : Number
        #xr4fKleNd4wHHP1l mapParams : Boolean
        #st0ir2vLTxbLTQWB mapFiles : Boolean
        #z5ah2mZWb8c5FmTM overrideParams : Boolean
      }
    }
    #xv4yZciZi2wFoqpM
    table Send_Options {
      type = "Object";
      exported = true;
      persistent = false;
      fields {
        #svWYln7UIackFIpB status : Number
      }
    }
    #BVGhpbmca
    table HTTP_Status_Codes {
      type = "Object";
      exported = true;
      persistent = false;
      fields {
        #BVGhpbmcaMjAwIE9L @200_OK : Number
        #BVGhpbmcaMjAxIENyZWF0ZWQa @201_Created : Number
        #BVGhpbmcaMzAwIE11bHRpcGxlIENob2ljZXMa @300_Multiple_Choices : Number
        #BVGhpbmcaMzAxIE1vdmVkIFBlcm1hbmVudGx5 @301_Moved_Permanently : Number
        #BVGhpbmcaMzAyIE1vdmVkIFRlbXBvcmFyaWx5 @302_Moved_Temporarily : Number
        #BVGhpbmcaMzAzIFNlZSBPdGhlcgaa @303_See_Other : Number
        #BVGhpbmcaMzA0IE5vdCBNb2RpZmllZAaa @304_Not_Modified : Number
        #BVGhpbmcaMzA3IFRlbXBvcmFyeSBSZWRpcmVjdAaa @307_Temporary_Redirect : Number
        #BVGhpbmcaNDAwIEJhZCBSZXF1ZXN0 @400_Bad_Request : Number
        #BVGhpbmcaNDAxIFVuYXV0aG9yaXplZAaa @401_Unauthorized : Number
        #BVGhpbmcaNDAyIFBheW1lbnQgUmVxdWlyZWQa @402_Payment_Required : Number
        #BVGhpbmcaNDAzIEZvcmJpZGRlbgaa @403_Forbidden : Number
        #BVGhpbmcaNDA0IE5vdCBGb3VuZAaa @404_Not_Found : Number
        #BVGhpbmcaNDA1IE1ldGhvZCBOb3QgQWxsb3dlZAaa @405_Method_Not_Allowed : Number
        #BVGhpbmcaNDA4IFJlcXVlc3QgVGltZW91dAaa @408_Request_Timeout : Number
        #BVGhpbmcaNDA5IENvbmZsaWN0 @409_Conflict : Number
        #BVGhpbmcaNDEwIEdvbmUa @410_Gone : Number
        #BVGhpbmcaNDEyIFByZWNvbmRpdGlvbiBGYWlsZWQa @412_Precondition_Failed : Number
        #BVGhpbmcaNDEzIFJlcXVlc3QgRW50aXR5IFRvbyBMYXJnZQaa @413_Request_Entity_Too_Large : Number
        #BVGhpbmcaNDE1IFVuc3VwcG9ydGVkIE1lZGlhIFR5cGUa @415_Unsupported_Media_Type : Number
        #BVGhpbmcaNDE4IEltIGEgdGVhcG90 @418_Im_a_teapot : Number
        #BVGhpbmcaNDIyIFVucHJvY2Vzc2FibGUgRW50aXR5 @422_Unprocessable_Entity : Number
        #BVGhpbmcaNDIzIExvY2tlZAaa @423_Locked : Number
        #BVGhpbmcaNDI0IEZhaWxlZCBEZXBlbmRlbmN5 @424_Failed_Dependency : Number
        #BVGhpbmcaNDI1IFVub3JkZXJlZCBDb2xsZWN0aW9u @425_Unordered_Collection : Number
        #BVGhpbmcaNDI5IFRvbyBNYW55IFJlcXVlc3Rz @429_Too_Many_Requests : Number
        #BVGhpbmcaNTAwIEludGVybmFsIFNlcnZlciBFcnJvcgaa @500_Internal_Server_Error : Number
        #BVGhpbmcaNTAxIE5vdCBJbXBsZW1lbnRlZAaa @501_Not_Implemented : Number
        #BVGhpbmcaNTAzIFNlcnZpY2UgVW5hdmFpbGFibGUa @503_Service_Unavailable : Number
      }
    }
    type Request
    type Response
    type Tokens_Table
    type Server
    type Middleware
    type Error
    action `sync` use(server: ♻ restify → Server, mid: ♻ restify → Middleware)
    action `sync` get(server: ♻ restify → Server, path: String, @then: ♻ restify → Request_Handler)
    action `sync` post(server: ♻ restify → Server, path: String, @then: ♻ restify → Request_Handler)
    action `sync` server() returns(server: ♻ restify → Server)
    action `sync` send(res: ♻ restify → Response, content: String, options\u003f: ♻ restify → Send_Options)
    action `sync` status(res: ♻ restify → Response, status: Number)
    action `sync` is(req: ♻ restify → Request, type: String) returns(r: Boolean)
    action `sync` accepts(req: ♻ restify → Request, types: String) returns(type: String)
    action `sync` put(server: ♻ restify → Server, path: String, @then: ♻ restify → Request_Handler)
    action `sync` del(server: ♻ restify → Server, path: String, @then: ♻ restify → Request_Handler)
    action `sync` head(server: ♻ restify → Server, path: String, @then: ♻ restify → Request_Handler)
    action `sync` pre(server: ♻ restify → Server, mid: ♻ restify → Middleware)
    action `sync` CORS(options\u003f: ♻ restify → CORS_Options) returns(mid: ♻ restify → Middleware)
    action `sync` conditional_request() returns(mid: ♻ restify → Middleware)
    action `sync` route(server: ♻ restify → Server, method: String, path: String, @then: ♻ restify → Request_Handler)
    action `sync` json(res: ♻ restify → Response, content: Json_Object, options\u003f: ♻ restify → Send_Options)
    action `sync` next(res: ♻ restify → Response)
    action `sync` next_error(res: ♻ restify → Response, error: ♻ restify → Error)
    action `sync` address(server: ♻ restify → Server) returns(address: String)
    action `sync` gzip_response() returns(mid: ♻ restify → Middleware)
    action `sync` header(req: ♻ restify → Request, name: String) returns(value: String)
    action `sync` is_secure(req: ♻ restify → Request) returns(r: Boolean)
    action `sync` is_chunked(req: ♻ restify → Request) returns(r: Boolean)
    action `sync` is_keep_alive(req: ♻ restify → Request) returns(r: Boolean)
    action `sync` set_header(res: ♻ restify → Response, name: String, value: String)
    action `sync` body_parser(options\u003f: ♻ restify → Body_Parser_Options) returns(mid: ♻ restify → Middleware)
    action `sync` throttle(options\u003f: ♻ restify → Throttle_Options) returns(middleware: ♻ restify → Middleware)
    action `sync` date_parser(clock_skew: Number) returns(middleware: ♻ restify → Middleware)
    action `sync` serve_static(directory: String, options\u003f: ♻ restify → Serve_Static_Options) returns(middleware: ♻ restify → Middleware)
    action `sync` query_parser() returns(middleware: ♻ restify → Middleware)
    action `sync` authorization_parser() returns(middleware: ♻ restify → Middleware)
    action `sync` jsonp() returns(middleware: ♻ restify → Middleware)
    action `sync` body_as_json(req: ♻ restify → Request) returns(body: Json_Object)
    action `sync` id(req: ♻ restify → Request) returns(id: String)
    action `sync` param(req: ♻ restify → Request, name: String) returns(value: String)
    action `sync` opts(server: ♻ restify → Server, path: String, @then: ♻ restify → Request_Handler)
    action `sync` patch(server: ♻ restify → Server, path: String, @then: ♻ restify → Request_Handler)
    action `sync` to_string(ser: ♻ restify → Server) returns(s: String)
    action `sync` sanitize_path() returns(middleware: ♻ restify → Middleware)
    action `sync` body(req: ♻ restify → Request) returns(body: String)
    action `sync` send_error(res: ♻ restify → Response, status: Number, message: String)
    action `sync` all(server: ♻ restify → Server, @then: ♻ restify → Request_Handler)
    action `sync` method(req: ♻ restify → Request) returns(method: String)
    action `sync` url(req: ♻ restify → Request) returns(url: String)
    action `sync` query(req: ♻ restify → Request) returns(query: Json_Object)
    action `sync` redirect(res: ♻ restify → Response, status_code: Number, url: String)
    action `sync` send_status(res: ♻ restify → Response, status_code: Number)
    action `sync` charset(res: ♻ restify → Response, encoding: String)
    action `sync` route_regex(server: ♻ restify → Server, method: String, path_regex: String, @then: ♻ restify → Request_Handler)
    action `async` read_body_as_buffer(req: ♻ restify → Request) returns(body: Buffer)
    action `sync` headers(req: ♻ restify → Request) returns(headers: Json_Object)
    action `sync` server_url(req: ♻ restify → Request) returns(url: String)
    action `sync` html(res: ♻ restify → Response, content: String, options\u003f: ♻ restify → Send_Options)
    action `sync` send_text(res: ♻ restify → Response, content: String, content_type: String, options\u003f: ♻ restify → Send_Options)
    action `sync` send_buffer(res: ♻ restify → Response, content: Buffer, content_type: String, options\u003f: ♻ restify → Send_Options)
    action `sync` finished(res: ♻ restify → Response) returns(done: Boolean)
    action `sync` http() returns(codes: ♻ restify → HTTP_Status_Codes)
    action `sync` remote_ip(req: ♻ restify → Request) returns(ip: String)
    action `sync` disable_ticks()
    action `sync` send_custom_error(res: ♻ restify → Response, status: Number, message: String)
  }
}
#MLbRHC7j0u4Bo4GQ meta import restify_touchdevelop {
  pub "dvuhb"
  usage {
    action `sync` autobind(server: ♻ restify → Server)
    action `sync` errors_to_log(logger: App_Logger) returns(middleware: ♻ restify → Middleware)
  }
  #OzaDw2jYXC1r4oMK resolve restify = ♻ restify with {
  }
}
#Tnw31Dmg2nmrVqYq meta import azure_event_hubs {
  pub "qbjtg"
  usage {
    #qy4yPchAE7AUedlB
    table Options {
      type = "Object";
      exported = true;
      persistent = false;
      fields {
        // Name of the event hub
        #BULIHveLGv3xhPGc hub_namespace : String
        // Shared Access Signature token; otherwise the server setting ``AZURE_SERVICEBUS_SAS_TOKEN`` is used.
        #xr7jIhKzmCpq0i5N sas_token : String
      }
    }
    #EyRHf2UILCkoocED
    table Event_Hub {
      type = "Object";
      exported = true;
      persistent = false;
      fields {
        #t4VjI1BVPLvcUl22 name : String
      }
    }
    action `sync` init(options\u003f: ♻ azure_event_hubs → Options)
    action `async` send_message(hub: ♻ azure_event_hubs → Event_Hub, device_id: String, msg: String) returns(status: Number)
    action `async` create_event_hub_if_not_exists(name_: String) returns(hub: ♻ azure_event_hubs → Event_Hub)
    action `async` send_message_as_json(hub: ♻ azure_event_hubs → Event_Hub, device_id: String, msg: Json_Object) returns(status: Number)
  }
}
#xcDhCtrxPsQBOdut
action init_routes() {
  #f2p7glhNykvLLVg0 // TODO: add custom routes here
  #xLyImlUfp28hk6Pb $server := @\u267b→restify→server;
  #B2Ui2S2BrMhefyH4 $server→get("/echo", $@then);
  #c58sWTLqXwkWaboA where @then(req: ♻ restify → Request, res: ♻ restify → Response) {
    #yXsNFxumA3UsfrbL $res→send($req→body);
  }
  meta private;
}
#xZ4HxLh7nvC9Ye4O meta import node_hash {
  pub "ezbka"
  usage {
    action `sync` sha256(value: String) returns(digest: String)
    action `sync` sha1(value: String) returns(digest: String)
  }
  #xLAq93oXbklxTC8e resolve node_crypto = ♻ node_crypto with {
  }
}
#xwBt607irxmtq17g meta import node_crypto {
  pub "oevpc"
  usage {
    type credentials
    type hash
    type hmac
    type cipher
    type decipher
    type sign
    type verify
    type DiffieHellman
    action `sync` get_ciphers() returns(ciphers: Collection[String])
    action `sync` get_hashes() returns(hashes: Collection[String])
    action `sync` create_credentials(details: Json_Object) returns(credentials: ♻ node_crypto → credentials)
    action `sync` create_hash(algorithm: String) returns(hash: ♻ node_crypto → hash)
    action `sync` update_hash(hash: ♻ node_crypto → hash, hash_data: Buffer)
    action `sync` digest_hash(hash: ♻ node_crypto → hash) returns(digest: Buffer)
    action `sync` update_hmac(hmac: ♻ node_crypto → hmac, hmac_data: Buffer)
    action `sync` digest_hmac(hmac: ♻ node_crypto → hmac) returns(digest: Buffer)
    action `sync` create_cipher(algorithm: String, password: Buffer) returns(cipher: ♻ node_crypto → cipher)
    action `sync` create_cipher_iv(algorithm: String, key: Buffer, iv: Buffer) returns(iv_cipher: ♻ node_crypto → cipher)
    action `sync` update_cipher(cipher: ♻ node_crypto → cipher, _data: Buffer) returns(enciphered: Buffer)
    action `sync` final(cipher: ♻ node_crypto → cipher) returns(cipher_final: Buffer)
    action `sync` set_auto_padding(cipher: ♻ node_crypto → cipher)
    action `sync` create_decipher(algorithm: String, password: Buffer) returns(decipher: ♻ node_crypto → decipher)
    action `sync` create_decipher_iv(algorithm: String, key: Buffer, iv: Buffer) returns(iv_decipher: ♻ node_crypto → decipher)
    action `sync` update_decipher(decipher: ♻ node_crypto → decipher, _data: Buffer) returns(deciphered: Buffer)
    action `sync` final_(decipher: ♻ node_crypto → decipher) returns(decipher_final: Buffer)
    action `sync` set_auto_padding_(decipher: ♻ node_crypto → decipher)
    action `sync` create_sign(algorithm: String) returns(sign: ♻ node_crypto → sign)
    action `sync` update_sign(sign: ♻ node_crypto → sign, sign\_data: Buffer)
    action `sync` sign_(sign: ♻ node_crypto → sign, private_key: String) returns(signature: Buffer)
    action `sync` create_verify(algorithm: String) returns(verify: ♻ node_crypto → verify)
    action `sync` update_verify(verify: ♻ node_crypto → verify, verify_data: Buffer)
    action `sync` verify_(verify: ♻ node_crypto → verify, object: String, signature: Buffer) returns(valid: Boolean)
    action `sync` create_DiffieHellman(prime_length: Number) returns(DiffieHellman: ♻ node_crypto → DiffieHellman)
    action `sync` generate_keys(DiffieHellman: ♻ node_crypto → DiffieHellman) returns(public_key: Buffer)
    action `sync` compute_secret(DiffieHellman: ♻ node_crypto → DiffieHellman, other_public_key: Buffer) returns(shared_secret: Buffer)
    action `sync` get_prime(DiffieHellman: ♻ node_crypto → DiffieHellman) returns(DH_prime: Buffer)
    action `sync` get_generator(DiffieHellman: ♻ node_crypto → DiffieHellman) returns(generator: Buffer)
    action `sync` get_public_key(DiffieHellman: ♻ node_crypto → DiffieHellman) returns(public_key: Buffer)
    action `sync` get_private_key(DiffieHellman: ♻ node_crypto → DiffieHellman) returns(private_key: Buffer)
    action `sync` set_public_key(DiffieHellman: ♻ node_crypto → DiffieHellman, public_key: Buffer)
    action `sync` set_private_key(DiffieHellman: ♻ node_crypto → DiffieHellman, private_key: Buffer)
    action `sync` get_DiffieHellman(group_name: String) returns(DiffieHellman: ♻ node_crypto → DiffieHellman)
    action `async` pbkdf2(password: String, salt: String, iterations: Number, keylen: Number) returns(derived_key: String)
    action `async` random_bytes(size: Number) returns(strong_data: Buffer)
    action `sync` DEFAULT\_ENCODING() returns(default_encoding: String)
    action `sync` create_hmac(algorithm: String, key: String) returns(hmac: ♻ node_crypto → hmac)
    action `sync` create_DiffieHellmanWithPrime(prime: Buffer) returns(DiffieHellman: ♻ node_crypto → DiffieHellman)
    action `async` pseudo_random_bytes(size: Number) returns(non\u002dstrong_data: Buffer)
    action `sync` update_hash_string(hash: ♻ node_crypto → hash, hash_data: String)
    action `async` new_guid() returns(guid: String)
  }
}
#H2FT9zCxK69FMvXC meta import application_insights {
  pub "owhre"
  usage {
    #BVGhpbmca
    table Options {
      type = "Object";
      exported = true;
      persistent = false;
      fields {
        #xYM2DFyGKHO12BbR auto_collect_exceptions : Boolean
        #xp5FVyAAHVpPvqkQ auto_collect_console : Boolean
        #ic0oN3OGFQdZ4eb0 auto_collect_requests : Boolean
        #JC3cWz724nB9Rwoh auto_collect_performance : Boolean
      }
    }
    #jQX44THKDWpQpHhU
    table Event_Options {
      type = "Object";
      exported = true;
      persistent = false;
      fields {
        #lTT22PAyjeXo47EF arguments : Json_Object
        #x7R256x3M3SbrPmi duration_in_ms : Number
        #gJxbxKuoVAifu2Lo duration_since : Number
      }
    }
    #ZGPN2rZbWO22hiYK
    table Request_Options {
      type = "Object";
      exported = true;
      persistent = false;
      fields {
        #x8GBdWsNotD1GLcL properties : Json_Object
        #b48kCc1eoez2GDNM duration_override : Number
      }
    }
    action `sync` init(options\u003f: ♻ application_insights → Options) returns(active: Boolean)
  }
}
